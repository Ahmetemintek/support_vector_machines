{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SVC Project"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing useful libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "#some arrangement for visualization\n",
    "sns.set(style=\"whitegrid\")   \n",
    "title_font= {'family': 'arial', 'color': 'darkred','weight': 'bold','size': 16 }\n",
    "label_font= {'family': 'arial', 'color': 'darkblue','weight': 'bold','size': 13 }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preparing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player1</th>\n",
       "      <th>Player2</th>\n",
       "      <th>Round</th>\n",
       "      <th>Result</th>\n",
       "      <th>FNL.1</th>\n",
       "      <th>FNL.2</th>\n",
       "      <th>FSP.1</th>\n",
       "      <th>FSW.1</th>\n",
       "      <th>SSP.1</th>\n",
       "      <th>SSW.1</th>\n",
       "      <th>...</th>\n",
       "      <th>BPC.2</th>\n",
       "      <th>BPW.2</th>\n",
       "      <th>NPA.2</th>\n",
       "      <th>NPW.2</th>\n",
       "      <th>TPW.2</th>\n",
       "      <th>ST1.2</th>\n",
       "      <th>ST2.2</th>\n",
       "      <th>ST3.2</th>\n",
       "      <th>ST4.2</th>\n",
       "      <th>ST5.2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>B.Becker</td>\n",
       "      <td>A.Murray</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>59</td>\n",
       "      <td>29</td>\n",
       "      <td>41</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>10</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>6.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>J.Ward</td>\n",
       "      <td>Y-H.Lu</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>62</td>\n",
       "      <td>77</td>\n",
       "      <td>38</td>\n",
       "      <td>35</td>\n",
       "      <td>...</td>\n",
       "      <td>15</td>\n",
       "      <td>2</td>\n",
       "      <td>46</td>\n",
       "      <td>39</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>N.Mahut</td>\n",
       "      <td>J.Hajek</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>72</td>\n",
       "      <td>44</td>\n",
       "      <td>28</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>19</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>T.Robredo</td>\n",
       "      <td>A.Bogomolov Jr.</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>77</td>\n",
       "      <td>40</td>\n",
       "      <td>23</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>R.Haase</td>\n",
       "      <td>M.Youzhny</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>68</td>\n",
       "      <td>61</td>\n",
       "      <td>32</td>\n",
       "      <td>15</td>\n",
       "      <td>...</td>\n",
       "      <td>21</td>\n",
       "      <td>3</td>\n",
       "      <td>44</td>\n",
       "      <td>30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 42 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Player1          Player2  Round  Result  FNL.1  FNL.2  FSP.1  FSW.1  \\\n",
       "0   B.Becker         A.Murray      1       1      0      3     59     29   \n",
       "1     J.Ward           Y-H.Lu      1       1      1      3     62     77   \n",
       "2    N.Mahut          J.Hajek      1       0      3      0     72     44   \n",
       "3  T.Robredo  A.Bogomolov Jr.      1       0      3      0     77     40   \n",
       "4    R.Haase        M.Youzhny      1       1      0      3     68     61   \n",
       "\n",
       "   SSP.1  SSW.1  ...  BPC.2  BPW.2  NPA.2  NPW.2  TPW.2  ST1.2  ST2.2  ST3.2  \\\n",
       "0     41     14  ...     10      5     23     17    NaN      6      6    6.0   \n",
       "1     38     35  ...     15      2     46     39    NaN      6      6    7.0   \n",
       "2     28     10  ...      1      0     19     12    NaN      2      4    3.0   \n",
       "3     23     12  ...      0      0     22     13    NaN      2      2    4.0   \n",
       "4     32     15  ...     21      3     44     30    NaN      6      7    7.0   \n",
       "\n",
       "   ST4.2  ST5.2  \n",
       "0    NaN    NaN  \n",
       "1    7.0    NaN  \n",
       "2    NaN    NaN  \n",
       "3    NaN    NaN  \n",
       "4    NaN    NaN  \n",
       "\n",
       "[5 rows x 42 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#uploading datatset from local\n",
    "df= pd.read_csv(\"/Users/ahmetemintek/Desktop/hakan_odev/Grand-slams-men-2013.csv\")\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 239 entries, 0 to 238\n",
      "Data columns (total 42 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   Player1  239 non-null    object \n",
      " 1   Player2  239 non-null    object \n",
      " 2   Round    239 non-null    int64  \n",
      " 3   Result   239 non-null    int64  \n",
      " 4   FNL.1    239 non-null    int64  \n",
      " 5   FNL.2    239 non-null    int64  \n",
      " 6   FSP.1    239 non-null    int64  \n",
      " 7   FSW.1    239 non-null    int64  \n",
      " 8   SSP.1    239 non-null    int64  \n",
      " 9   SSW.1    239 non-null    int64  \n",
      " 10  ACE.1    239 non-null    int64  \n",
      " 11  DBF.1    239 non-null    int64  \n",
      " 12  WNR.1    239 non-null    int64  \n",
      " 13  UFE.1    239 non-null    int64  \n",
      " 14  BPC.1    239 non-null    int64  \n",
      " 15  BPW.1    239 non-null    int64  \n",
      " 16  NPA.1    239 non-null    int64  \n",
      " 17  NPW.1    239 non-null    int64  \n",
      " 18  TPW.1    125 non-null    float64\n",
      " 19  ST1.1    239 non-null    int64  \n",
      " 20  ST2.1    239 non-null    int64  \n",
      " 21  ST3.1    239 non-null    int64  \n",
      " 22  ST4.1    239 non-null    int64  \n",
      " 23  ST5.1    239 non-null    int64  \n",
      " 24  FSP.2    239 non-null    int64  \n",
      " 25  FSW.2    239 non-null    int64  \n",
      " 26  SSP.2    239 non-null    int64  \n",
      " 27  SSW.2    239 non-null    int64  \n",
      " 28  ACE.2    239 non-null    int64  \n",
      " 29  DBF.2    236 non-null    float64\n",
      " 30  WNR.2    239 non-null    int64  \n",
      " 31  UFE.2    239 non-null    int64  \n",
      " 32  BPC.2    239 non-null    int64  \n",
      " 33  BPW.2    239 non-null    int64  \n",
      " 34  NPA.2    239 non-null    int64  \n",
      " 35  NPW.2    239 non-null    int64  \n",
      " 36  TPW.2    125 non-null    float64\n",
      " 37  ST1.2    239 non-null    int64  \n",
      " 38  ST2.2    239 non-null    int64  \n",
      " 39  ST3.2    237 non-null    float64\n",
      " 40  ST4.2    95 non-null     float64\n",
      " 41  ST5.2    40 non-null     float64\n",
      "dtypes: float64(6), int64(34), object(2)\n",
      "memory usage: 78.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "df columns: Index(['Player1', 'Player2', 'Result', 'ACE.1', 'ACE.2'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "#getting rid of columns that won't be use\n",
    "use_col= [\"Player1\", \"Player2\",\"ACE.1\", \"ACE.2\", \"Result\"]\n",
    "for col in df.columns:\n",
    "    if col not in use_col:\n",
    "        df= df.drop([col], axis=1)    \n",
    "print(\"df columns: {}\".format(df.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you see above, there are remained only desirable columns in our data frame. <br/>\n",
    "Before start to building the model, we should check the null values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Player1    0.0\n",
       "Player2    0.0\n",
       "Result     0.0\n",
       "ACE.1      0.0\n",
       "ACE.2      0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()*100/df.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is no null value, we can continue. <br/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Building"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we will split the data into train and test set. (First 100 rows train set, rests test set.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of train set's features: (100, 2)\n",
      "Shape of train set's target: (100,)\n",
      "Shape of test set's features: (139, 2)\n",
      "Shape of test set's target: (139,)\n"
     ]
    }
   ],
   "source": [
    "X= df[[\"ACE.1\", \"ACE.2\"]]\n",
    "y= df[\"Result\"]\n",
    "\n",
    "X_train= X.iloc[0:100, :]\n",
    "X_test= X.iloc[100:, :]\n",
    "y_train= y.iloc[:100]\n",
    "y_test= y.iloc[100:]\n",
    "\n",
    "print(\"Shape of train set's features: {}\".format(X_train.shape))\n",
    "print(\"Shape of train set's target: {}\".format(y_train.shape))\n",
    "print(\"Shape of test set's features: {}\".format(X_test.shape))\n",
    "print(\"Shape of test set's target: {}\".format(y_test.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we are ready to implement SVC. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model 1: Linear"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: Gamma parameter doesn't use when the kernel is selected as linear."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C</th>\n",
       "      <th>score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.5000</td>\n",
       "      <td>0.776978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.762590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.1000</td>\n",
       "      <td>0.762590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.762590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.525180</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        C     score\n",
       "0  1.5000  0.776978\n",
       "1  1.0000  0.762590\n",
       "2  0.1000  0.762590\n",
       "3  0.0010  0.762590\n",
       "4  0.0001  0.525180"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "compare= pd.DataFrame(columns=[\"C\", \"score\"])\n",
    "for c in [1.5, 1, 0.1, 0.001, 0.0001]:\n",
    "    model= SVC(kernel=\"linear\", C=c).fit(X_train, y_train)\n",
    "    y_pred= model.predict(X_test)\n",
    "    score=accuracy_score(y_test, y_pred)\n",
    "    compare= compare.append({\"C\": c, \"score\": score}, ignore_index=True)\n",
    "    \n",
    "display(compare.sort_values(by=[\"score\"], ascending=False))    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you see, when we choose the C parameter as 1.5 we can catch the highest accuracy score. <br/>\n",
    "Here is the optimal model for linear kernel:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score of model_1: 0.7769784172661871\n"
     ]
    }
   ],
   "source": [
    "model_1= SVC(kernel=\"linear\", C=1.5).fit(X_train, y_train)\n",
    "y_pred= model_1.predict(X_test)\n",
    "score_1= accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy score of model_1: {}\".format(score_1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Storing the indexes of predictions:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     result  predictions\n",
       "100       0            1\n",
       "101       0            0\n",
       "102       0            0\n",
       "103       1            1\n",
       "104       0            1"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_1= pd.DataFrame({\"result\": df.iloc[100:, 2]})  #we pull our indexes of test data. \n",
    "store_1[\"predictions\"]= y_pred   #adding the predictions\n",
    "store_1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Zeros' indexes: [101, 102, 106, 110, 112, 115, 121, 124, 128, 132, 137, 143, 144, 152, 153, 155, 157, 160, 162, 163, 164, 167, 168, 172, 175, 180, 184, 186, 188, 190, 192, 196, 198, 202, 204, 211, 212, 213, 217, 218, 219, 223, 226, 228, 230, 232, 234, 235, 238] \n",
      "\n",
      "Ones' indexes: [100, 103, 104, 105, 107, 108, 109, 111, 113, 114, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 156, 158, 159, 161, 165, 166, 169, 170, 171, 173, 174, 176, 177, 178, 179, 181, 182, 183, 185, 187, 189, 191, 193, 194, 195, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 214, 215, 216, 220, 221, 222, 224, 225, 227, 229, 231, 233, 236, 237]\n"
     ]
    }
   ],
   "source": [
    "indexes_0= []  #it will store zeros' indexes\n",
    "indexes_1= []  #it will store ones' indexes\n",
    "i=100  #index numbers\n",
    "for pred in store_1[\"predictions\"]: \n",
    "    if pred==0:\n",
    "        indexes_0.append(i)\n",
    "        i+=1\n",
    "    elif pred==1:\n",
    "        indexes_1.append(i)  \n",
    "        i+=1\n",
    "print(\"Zeros' indexes: {} \\n\".format(indexes_0))\n",
    "print(\"Ones' indexes: {}\".format(indexes_1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Extracting the rows from test data based on indexes:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player1</th>\n",
       "      <th>Player2</th>\n",
       "      <th>Result</th>\n",
       "      <th>ACE.1</th>\n",
       "      <th>ACE.2</th>\n",
       "      <th>preds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>F.Verdasco</td>\n",
       "      <td>K.De Schepper</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>J.Janowicz</td>\n",
       "      <td>J.Melzer</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>11</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>L.Kubot</td>\n",
       "      <td>A.Mannarino</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "      <td>13</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>A.Seppi</td>\n",
       "      <td>J.Del Potro</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>D.Ferrer</td>\n",
       "      <td>I.Dodig</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>14</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Player1        Player2  Result  ACE.1  ACE.2  preds\n",
       "100  F.Verdasco  K.De Schepper       0      9      9    1.0\n",
       "101  J.Janowicz       J.Melzer       0     16     11    0.0\n",
       "102     L.Kubot    A.Mannarino       0     26     13    0.0\n",
       "103     A.Seppi    J.Del Potro       1      5      9    1.0\n",
       "104    D.Ferrer        I.Dodig       0      7     14    1.0"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1= df\n",
    "df_1[\"preds\"]= store_1[\"predictions\"]\n",
    "df_1= df_1.dropna(axis=0)  #training data (first 100 rows) got nan\n",
    "df_1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have combined original data and predictions based on indexes, then we have droped training data. <br/>\n",
    "On the plotting step, we will use df_1 for model 1 result."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model 2: Poly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C</th>\n",
       "      <th>score</th>\n",
       "      <th>gamma</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.5000</td>\n",
       "      <td>0.776978</td>\n",
       "      <td>scale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.5000</td>\n",
       "      <td>0.776978</td>\n",
       "      <td>auto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.762590</td>\n",
       "      <td>scale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.762590</td>\n",
       "      <td>auto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.1000</td>\n",
       "      <td>0.762590</td>\n",
       "      <td>scale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.1000</td>\n",
       "      <td>0.762590</td>\n",
       "      <td>auto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.762590</td>\n",
       "      <td>scale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.762590</td>\n",
       "      <td>auto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.525180</td>\n",
       "      <td>scale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.525180</td>\n",
       "      <td>auto</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        C     score  gamma\n",
       "0  1.5000  0.776978  scale\n",
       "1  1.5000  0.776978   auto\n",
       "2  1.0000  0.762590  scale\n",
       "3  1.0000  0.762590   auto\n",
       "4  0.1000  0.762590  scale\n",
       "5  0.1000  0.762590   auto\n",
       "6  0.0010  0.762590  scale\n",
       "7  0.0010  0.762590   auto\n",
       "8  0.0001  0.525180  scale\n",
       "9  0.0001  0.525180   auto"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "compare= pd.DataFrame(columns=[\"C\", \"score\", \"gamma\"])\n",
    "for c in [1.5, 1, 0.1, 0.001, 0.0001]:\n",
    "    for gamma in [\"scale\", \"auto\"]:\n",
    "        model= SVC(kernel=\"linear\", C=c, gamma=gamma).fit(X_train, y_train)\n",
    "        y_pred= model.predict(X_test)\n",
    "        score=accuracy_score(y_test, y_pred)\n",
    "        compare= compare.append({\"C\": c, \"score\": score, \"gamma\": gamma}, ignore_index=True)\n",
    "    \n",
    "display(compare.sort_values(by=[\"score\"], ascending=False)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you see, when we choose the C parameter as 1.5 and gamma parameter as scale we can catch the highest accuracy score. \n",
    "Here is the optimal model for poly kernel:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score of model_2: 0.7769784172661871\n"
     ]
    }
   ],
   "source": [
    "model_2= SVC(kernel=\"linear\", C=1.5, gamma=\"scale\").fit(X_train, y_train)\n",
    "y_pred= model_2.predict(X_test)\n",
    "score_2= accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy score of model_2: {}\".format(score_2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Storing the indexes of predictions:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     result  predictions\n",
       "100       0            1\n",
       "101       0            0\n",
       "102       0            0\n",
       "103       1            1\n",
       "104       0            1"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_2= pd.DataFrame({\"result\": df.iloc[100:, 2]})  #we pull our indexes of test data. \n",
    "store_2[\"predictions\"]= y_pred   #adding the predictions\n",
    "store_2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Zeros' indexes: [101, 102, 106, 110, 112, 115, 121, 124, 128, 132, 137, 143, 144, 152, 153, 155, 157, 160, 162, 163, 164, 167, 168, 172, 175, 180, 184, 186, 188, 190, 192, 196, 198, 202, 204, 211, 212, 213, 217, 218, 219, 223, 226, 228, 230, 232, 234, 235, 238] \n",
      "\n",
      "Ones' indexes: [100, 103, 104, 105, 107, 108, 109, 111, 113, 114, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 129, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 156, 158, 159, 161, 165, 166, 169, 170, 171, 173, 174, 176, 177, 178, 179, 181, 182, 183, 185, 187, 189, 191, 193, 194, 195, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 214, 215, 216, 220, 221, 222, 224, 225, 227, 229, 231, 233, 236, 237]\n"
     ]
    }
   ],
   "source": [
    "indexes_0= []  #it will store zeros' indexes\n",
    "indexes_1= []  #it will store ones' indexes\n",
    "i=100  #index numbers\n",
    "for pred in store_2[\"predictions\"]: \n",
    "    if pred==0:\n",
    "        indexes_0.append(i)\n",
    "        i+=1\n",
    "    elif pred==1:\n",
    "        indexes_1.append(i)  \n",
    "        i+=1\n",
    "print(\"Zeros' indexes: {} \\n\".format(indexes_0))\n",
    "print(\"Ones' indexes: {}\".format(indexes_1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Extracting the rows from test data based on indexes:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player1</th>\n",
       "      <th>Player2</th>\n",
       "      <th>Result</th>\n",
       "      <th>ACE.1</th>\n",
       "      <th>ACE.2</th>\n",
       "      <th>preds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>F.Verdasco</td>\n",
       "      <td>K.De Schepper</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>J.Janowicz</td>\n",
       "      <td>J.Melzer</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>11</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>L.Kubot</td>\n",
       "      <td>A.Mannarino</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "      <td>13</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>A.Seppi</td>\n",
       "      <td>J.Del Potro</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>D.Ferrer</td>\n",
       "      <td>I.Dodig</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>14</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Player1        Player2  Result  ACE.1  ACE.2  preds\n",
       "100  F.Verdasco  K.De Schepper       0      9      9    0.0\n",
       "101  J.Janowicz       J.Melzer       0     16     11    1.0\n",
       "102     L.Kubot    A.Mannarino       0     26     13    1.0\n",
       "103     A.Seppi    J.Del Potro       1      5      9    1.0\n",
       "104    D.Ferrer        I.Dodig       0      7     14    1.0"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_2= df\n",
    "df_2[\"preds\"]= store_3[\"predictions\"]\n",
    "df_2= df_2.dropna(axis=0)  #training data (first 100 rows) got nan\n",
    "df_2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have combined original data and predictions based on indexes, then we have droped training data. <br/>\n",
    "On the plotting step, we will use df_2 for model 1 result."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model 3: rbf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C</th>\n",
       "      <th>score</th>\n",
       "      <th>gamma</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.726619</td>\n",
       "      <td>scale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.5000</td>\n",
       "      <td>0.719424</td>\n",
       "      <td>scale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.1000</td>\n",
       "      <td>0.697842</td>\n",
       "      <td>scale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.0000</td>\n",
       "      <td>0.690647</td>\n",
       "      <td>auto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.5000</td>\n",
       "      <td>0.683453</td>\n",
       "      <td>auto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.1000</td>\n",
       "      <td>0.525180</td>\n",
       "      <td>auto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.525180</td>\n",
       "      <td>scale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.0010</td>\n",
       "      <td>0.525180</td>\n",
       "      <td>auto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.525180</td>\n",
       "      <td>scale</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.0001</td>\n",
       "      <td>0.525180</td>\n",
       "      <td>auto</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        C     score  gamma\n",
       "2  1.0000  0.726619  scale\n",
       "0  1.5000  0.719424  scale\n",
       "4  0.1000  0.697842  scale\n",
       "3  1.0000  0.690647   auto\n",
       "1  1.5000  0.683453   auto\n",
       "5  0.1000  0.525180   auto\n",
       "6  0.0010  0.525180  scale\n",
       "7  0.0010  0.525180   auto\n",
       "8  0.0001  0.525180  scale\n",
       "9  0.0001  0.525180   auto"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "compare= pd.DataFrame(columns=[\"C\", \"score\", \"gamma\"])\n",
    "for c in [1.5, 1, 0.1, 0.001, 0.0001]:\n",
    "    for gamma in [\"scale\", \"auto\"]:\n",
    "        model_3= SVC(kernel=\"rbf\", C=c, gamma=gamma).fit(X_train, y_train)\n",
    "        y_pred= model_3.predict(X_test)\n",
    "        score=accuracy_score(y_test, y_pred)\n",
    "        compare= compare.append({\"C\": c, \"score\": score, \"gamma\": gamma}, ignore_index=True)\n",
    "    \n",
    "display(compare.sort_values(by=[\"score\"], ascending=False)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you see, when we choose the C parameter as 1.0 and gamma parameter as scale we can catch the highest accuracy score. <br/>\n",
    "Here is the optimal model for rbf kernel:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score of model_3: 0.7266187050359713\n"
     ]
    }
   ],
   "source": [
    "model_3= SVC(kernel=\"rbf\", C=1.0, gamma=\"scale\", probability=True).fit(X_train, y_train)\n",
    "y_pred= model_3.predict(X_test)\n",
    "score_3=accuracy_score(y_test, y_pred)\n",
    "print(\"Accuracy score of model_3: {}\".format(score_3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Storing the indexes of predictions:** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>result</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     result  predictions\n",
       "100       0            0\n",
       "101       0            1\n",
       "102       0            1\n",
       "103       1            1\n",
       "104       0            1"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "store_3= pd.DataFrame({\"result\": df.iloc[100:, 2]})  #we pull our indexes of test data. \n",
    "store_3[\"predictions\"]= y_pred   #adding the predictions\n",
    "store_3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Zeros' indexes: [100, 106, 110, 112, 115, 120, 121, 124, 128, 129, 131, 132, 137, 143, 144, 152, 153, 155, 156, 157, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 175, 178, 180, 184, 185, 186, 190, 192, 194, 196, 197, 198, 199, 201, 202, 204, 205, 207, 210, 211, 212, 213, 217, 218, 219, 223, 226, 227, 228, 229, 230, 232, 233, 234, 235, 238] \n",
      "\n",
      "Ones' indexes: [101, 102, 103, 104, 105, 107, 108, 109, 111, 113, 114, 116, 117, 118, 119, 122, 123, 125, 126, 127, 130, 133, 134, 135, 136, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 154, 158, 159, 161, 165, 166, 173, 174, 176, 177, 179, 181, 182, 183, 187, 188, 189, 191, 193, 195, 200, 203, 206, 208, 209, 214, 215, 216, 220, 221, 222, 224, 225, 231, 236, 237]\n"
     ]
    }
   ],
   "source": [
    "indexes_0= []  #it will store zeros' indexes\n",
    "indexes_1= []  #it will store ones' indexes\n",
    "i=100  #index numbers\n",
    "for pred in store_3[\"predictions\"]: \n",
    "    if pred==0:\n",
    "        indexes_0.append(i)\n",
    "        i+=1\n",
    "    elif pred==1:\n",
    "        indexes_1.append(i)  \n",
    "        i+=1\n",
    "print(\"Zeros' indexes: {} \\n\".format(indexes_0))\n",
    "print(\"Ones' indexes: {}\".format(indexes_1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Extracting the rows from test data based on indexes:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player1</th>\n",
       "      <th>Player2</th>\n",
       "      <th>Result</th>\n",
       "      <th>ACE.1</th>\n",
       "      <th>ACE.2</th>\n",
       "      <th>preds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>F.Verdasco</td>\n",
       "      <td>K.De Schepper</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>J.Janowicz</td>\n",
       "      <td>J.Melzer</td>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "      <td>11</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>L.Kubot</td>\n",
       "      <td>A.Mannarino</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "      <td>13</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>A.Seppi</td>\n",
       "      <td>J.Del Potro</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>D.Ferrer</td>\n",
       "      <td>I.Dodig</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>14</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Player1        Player2  Result  ACE.1  ACE.2  preds\n",
       "100  F.Verdasco  K.De Schepper       0      9      9    0.0\n",
       "101  J.Janowicz       J.Melzer       0     16     11    1.0\n",
       "102     L.Kubot    A.Mannarino       0     26     13    1.0\n",
       "103     A.Seppi    J.Del Potro       1      5      9    1.0\n",
       "104    D.Ferrer        I.Dodig       0      7     14    1.0"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_3= df\n",
    "df_3[\"preds\"]= store_3[\"predictions\"]\n",
    "df_3= df_3.dropna(axis=0)  #training data (first 100 rows) got nan\n",
    "df_3.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have combined original data and predictions based on indexes, then we have droped training data. <br/>\n",
    "On the plotting step, we will use df_3 for model 1 result."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,10))\n",
    "plt.title(\"SVC with Linear Kernel (Model 1)\", fontdict=title_font)\n",
    "sns.scatterplot(data=df_1, x=\"ACE.1\", y=\"ACE.2\", hue=\"preds\", palette=\"deep\")\n",
    "plt.xlabel(\"Number of aces by Player 1\", fontdict=label_font)\n",
    "plt.ylabel(\"Number of aces by Player 2\", fontdict=label_font)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,10))\n",
    "plt.title(\"SVC with Poly Kernel (Model 2)\", fontdict=title_font)\n",
    "sns.scatterplot(data=df_2, x=\"ACE.1\", y=\"ACE.2\", hue=\"preds\", palette=\"deep\")\n",
    "plt.xlabel(\"Number of aces by Player 1\", fontdict=label_font)\n",
    "plt.ylabel(\"Number of aces by Player 2\", fontdict=label_font)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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3tTJP3tB3//Dm3qnsLRfXre6ulp33nmnHn/8cb3wwgt66qmntHXr1m6P+cUvfqFf//rXeuONNxQKhfT000/3S20pDMs1586dqzVr1mjJkiWyWCyaP3++Fi5cqJSUFF199dXyeDyaO3euFixYYHQrABB2tuRM2ZIzI90GAAD4lncKS/W3Z9bI49t5iaPaxg797Zk1kqR50/MP6LU//PBDHXbYYUpKSpIknXDCCXr99dd11VVXSZLKy8vV2dmpqVOnSpJOO+003X333TrvvPMOqO5uYTkn75prrtE111zTbWz27Nl68cUXw1EeAAAAALr5z2sbuwLebh5fQP95beMBh7w9bTS5du3avd6fnp7e540ov0tYLoYOAAAAAANJXWNHn8b7IhQK9Rj75kaTvd1/oAh5AAAAAA46acmuPo33RWZm5nduNPnt+2tra/t1I0pCHgAAAICDzoUnjpPDZuk25rBZdOGJ4w74tQ8//HB99NFHamhoUEdHh958881uG03m5ubK4XB0Xf9u6dKl/boRZdiukwcAAAAAA8Xu8+7+89pG1TV2KC3ZpQtPHHfA5+NJO2fqrr32Wl144YXy+Xw644wzNHnyZF122WW65pprNGnSJN1+++266aab5Ha7NX78eF144YUHXHc3Qh4AAACAg9K86fn9Eur2ZPHixVq8eHG3sQceeKDrv8eOHatnn33WkNos1wQAAACAKELIAwAAAIAoQsgDAAAAgChCyAMAAACAKELIAwAAAIAoQsgDAAAAgChCyAMAAAAAA7S1tWnRokUqKyvrcd/GjRt1+umn64QTTtCNN94ov9/fb3UJeQAAAADQz9asWaNzzz1XRUVFe7z/F7/4hX7961/rjTfeUCgU0tNPP91vtQl5AAAAAA5KreveVck9V2j7LWeo5J4r1Lru3X577aefflo333yzMjIyetxXXl6uzs5OTZ06VZJ02mmn6fXXX++32tZ+eyUAAAAAGCRa172rulfuU8jvkST5W+pU98p9kqT4iUcd8Ovfcsste72vpqZG6enpXbfT09NVXV19wDV3YyYPAAAAwEGnccVjXQFvt5Dfo8YVjxleOxQK9RgzmUz99vqEPAAAAAAHHX9LfZ/G+1NmZqbq6uq6btfW1u5xWef+IuQBAAAAOOhYE1L7NN6fcnNz5XA4VFhYKElaunSpjjrqwJeI7kbIAwAA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\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,10))\n",
    "plt.title(\"SVC with Rbf Kernel (Model 3)\", fontdict=title_font)\n",
    "sns.scatterplot(data=df_3, x=\"ACE.1\", y=\"ACE.2\", hue=\"preds\", palette=\"deep\")\n",
    "plt.xlabel(\"Number of aces by Player 1\", fontdict=label_font)\n",
    "plt.ylabel(\"Number of aces by Player 2\", fontdict=label_font)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "main-env",
   "language": "python",
   "name": "main-env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
